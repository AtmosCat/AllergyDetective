package com.allergyguardian.allergyguardian.presentation.franchise.franchise_category

import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.EditorInfo
import android.widget.Button
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.core.view.isVisible
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.viewmodel.initializer
import androidx.lifecycle.viewmodel.viewModelFactory
import androidx.recyclerview.widget.LinearLayoutManager
import com.allergyguardian.allergyguardian.R
import com.allergyguardian.allergyguardian.data.model.franchise.Menu
import com.allergyguardian.allergyguardian.databinding.FragmentFranchiseCategoryBinding
import com.allergyguardian.allergyguardian.presentation.FranchiseViewModel
import com.allergyguardian.allergyguardian.presentation.UserViewModel
import com.allergyguardian.allergyguardian.presentation.base.UiState
import com.allergyguardian.allergyguardian.presentation.franchise.FranchiseFilterFragment
import com.allergyguardian.allergyguardian.presentation.franchise.franchise_detail.ARG_PARAM1
import com.allergyguardian.allergyguardian.presentation.franchise.franchise_detail.FranchiseDetailFragment

const val ARG_PARAM1 = "param1"

class FranchiseCategoryFragment : Fragment() {

    private var param1: String? = null
    private var _binding: FragmentFranchiseCategoryBinding? = null

    private var brands = listOf<String>()
    private var clickedBrand = ""
    private var clickedMenu = Menu()
    private var clickedBrandMenus = listOf<Menu>()

    private val categoryList = mutableListOf("Ïπ¥Ìéò", "Ìå®Ïä§Ìä∏Ìë∏Îìú", "Î≤†Ïù¥Ïª§Î¶¨/ÎèÑÎÑõ", "ÏïÑÏù¥Ïä§ÌÅ¨Î¶º",
        "ÏπòÌÇ®", "ÌîºÏûê", "ÏÉåÎìúÏúÑÏπò", "Ï†ÑÏ≤¥")

    private val fastfoodBrandList = mutableListOf("Îß•ÎèÑÎÇ†Îìú", "Î°ØÎç∞Î¶¨ÏïÑ", "KFC", "ÎßòÏä§ÌÑ∞Ïπò", "NBBÎ≤ÑÍ±∞")
    private val pizzaBrandList = mutableListOf("ÎèÑÎØ∏ÎÖ∏ÌîºÏûê", "ÌîºÏûêÌóõ", "ÎØ∏Ïä§ÌÑ∞ÌîºÏûê", "ÌîºÏûêÏïåÎ≥ºÎ°ú", "ÌååÌååÏ°¥Ïä§", "ÌîºÏûêÎÇòÎùºÏπòÌÇ®Í≥µÏ£º", "Î∞òÏò¨Î¶ºÌîºÏûê", "ÌîºÏûêÎßàÎ£®", "Ï≤≠ÎÖÑÌîºÏûê", "7Î≤àÍ∞ÄÌîºÏûê")
    private val chickenBrandList = mutableListOf("ÌîºÏûêÎÇòÎùºÏπòÌÇ®Í≥µÏ£º")
    private val cafeBrandList = mutableListOf("Ïä§ÌÉÄÎ≤ÖÏä§", "Ìà¨Ïç∏ÌîåÎ†àÏù¥Ïä§", "Î©îÍ∞ÄÏª§Ìîº")
    private val icecreamBrandList = mutableListOf("ÏïÑÏù¥Ïä§ÌÅ¨Î¶º ÏÑúÎπÑÏä§ Ï§ÄÎπÑÏ§ë")
    private val bakeryDoughnutBrandList = mutableListOf("Î≤†Ïù¥Ïª§Î¶¨/ÎèÑÎÑõ ÏÑúÎπÑÏä§ Ï§ÄÎπÑÏ§ë")
    private val sandwichBrandList = mutableListOf("ÏÉåÎìúÏúÑÏπò ÏÑúÎπÑÏä§ Ï§ÄÎπÑÏ§ë")
    private val allBrandList = cafeBrandList+fastfoodBrandList+bakeryDoughnutBrandList+icecreamBrandList+chickenBrandList+pizzaBrandList+sandwichBrandList

    private val categoryBrandsList = mutableListOf(
        cafeBrandList,fastfoodBrandList, bakeryDoughnutBrandList, icecreamBrandList, chickenBrandList, pizzaBrandList, sandwichBrandList, allBrandList
    )

    private val allergyNameList = listOf(
        "ÏïåÎ•ò(Í∞ÄÍ∏àÎ•ò)","Ïö∞Ïú†","Î©îÎ∞Ä","ÎïÖÏΩ©","ÎåÄÎëê","Î∞Ä","Í≥†Îì±Ïñ¥","Í≤å","ÏÉàÏö∞","ÎèºÏßÄÍ≥†Í∏∞","Î≥µÏà≠ÏïÑ","ÌÜ†ÎßàÌÜ†","ÏïÑÌô©ÏÇ∞Î•ò",
        "Ìò∏Îëê","Îã≠Í≥†Í∏∞","Ïá†Í≥†Í∏∞","Ïò§ÏßïÏñ¥","Ï°∞Í∞úÎ•ò(Ï°∞Í∞ú)","Ïû£","Ï°∞Í∞úÎ•ò(Íµ¥)","Ï°∞Í∞úÎ•ò(Ï†ÑÎ≥µ)","Ï°∞Í∞úÎ•ò(ÌôçÌï©)")

    private val eggKeywords = listOf("ÏïåÎ•ò","Í≥ÑÎûÄ", "ÎÇúÎ•ò")
    private val milkKeywords = listOf("Ïö∞Ïú†")
    private val buckwheatKeywords = listOf("Î©îÎ∞Ä")
    private val peanutKeywords = listOf("ÎïÖÏΩ©", "Í≤¨Í≥º")
    private val soybeanKeywords = listOf("ÎåÄÎëê")
    private val wheatKeywords = listOf("Î∞Ä")
    private val mackerelKeywords = listOf("Í≥†Îì±Ïñ¥")
    private val crabKeywords = listOf("Í≤å", "Í∞ëÍ∞Å")
    private val shrimpKeywords = listOf("ÏÉàÏö∞", "Í∞ëÍ∞Å")
    private val porkKeywords = listOf("ÎèºÏßÄ")
    private val peachKeywords = listOf("Î≥µÏà≠ÏïÑ")
    private val tomatoKeywords = listOf("ÌÜ†ÎßàÌÜ†")
    private val sulfurousAcidsKeywords = listOf("ÏïÑÌô©ÏÇ∞","Ïù¥ÏÇ∞ÌôîÌô©")
    private val walnutKeywords = listOf("Ìò∏Îëê", "Í≤¨Í≥º")
    private val chickenKeywords = listOf("Îã≠")
    private val beefKeywords = listOf("ÏÜåÍ≥†Í∏∞","Ïá†Í≥†Í∏∞")
    private val squidKeywords = listOf("Ïò§ÏßïÏñ¥")
    private val seashellKeywords = listOf("Ï°∞Í∞ú")
    private val pinenutKeywords = listOf("Ïû£", "Í≤¨Í≥º")
    private val oysterKeywords = listOf("Íµ¥", "Ï°∞Í∞ú")
    private val abaloneKeywords = listOf("Ï†ÑÎ≥µ", "Ï°∞Í∞ú")
    private val musselKeywords = listOf("ÌôçÌï©", "Ï°∞Í∞ú")

    private val allergyKeywordsList = listOf(
        eggKeywords,
        milkKeywords,
        buckwheatKeywords,
        peanutKeywords,
        soybeanKeywords,
        wheatKeywords,
        mackerelKeywords,
        crabKeywords,
        shrimpKeywords,
        porkKeywords,
        peachKeywords,
        tomatoKeywords,
        sulfurousAcidsKeywords,
        walnutKeywords,
        chickenKeywords,
        beefKeywords,
        squidKeywords,
        seashellKeywords,
        pinenutKeywords,
        oysterKeywords,
        abaloneKeywords,
        musselKeywords
    )

    private val binding get() = _binding!!

    private val userViewModel: UserViewModel by activityViewModels {
        viewModelFactory { initializer { UserViewModel(requireActivity().application) } }
    }

    private val franchiseViewModel: FranchiseViewModel by activityViewModels {
        viewModelFactory { initializer { FranchiseViewModel(requireActivity().application) } }
    }

    private val brandAdapter by lazy { BrandAdapter() }
    private val menuAdapter by lazy { MenuAdapter() }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            param1 = it.getString(ARG_PARAM1)
        }
    }
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        _binding = FragmentFranchiseCategoryBinding.inflate(inflater, container, false)
        return binding.root
    }

    companion object {
        fun newInstance(param1: String) =
            FranchiseCategoryFragment().apply {
            arguments = Bundle().apply {
                putString(ARG_PARAM1, param1)
            }
        }
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.btnBack.setOnClickListener{
            requireActivity().supportFragmentManager.popBackStack()
        }

        val clickedCategory = param1

        binding.recyclerviewFranchises.adapter = brandAdapter
        binding.recyclerviewFranchises.layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)

        binding.recyclerviewMenus.adapter = menuAdapter
        binding.recyclerviewMenus.layoutManager = LinearLayoutManager(requireContext())

        binding.tvCategoryTitle.text = "üëå Ïπ¥ÌÖåÍ≥†Î¶¨: ${clickedCategory}"

        val categoryIndex = categoryList.indexOf(clickedCategory)
        brands = categoryBrandsList[categoryIndex]
        brandAdapter.submitList(brands)

        binding.etSearch.setText(franchiseViewModel.searchKeyword.value)
        binding.etSearch.setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                franchiseViewModel.setSearchKeyword(binding.etSearch.text.toString())
                true
            } else {
                false
            }
        }

        // Ï¥àÍ∏∞ Í≤ÄÏÉâÏñ¥, ÏïåÎü¨ÏßÄ ÌïÑÌÑ∞ ÏÑ§Ï†ï
        franchiseViewModel.setAllergyFilter(mutableListOf())
        franchiseViewModel.setSearchKeyword("")

        franchiseViewModel.selectedAllergies.observe(viewLifecycleOwner) { selectedAllergies ->
            franchiseViewModel.searchKeyword.observe(viewLifecycleOwner) { _searchKeyword ->
                if (selectedAllergies.isNullOrEmpty()) {
                    binding.tvFilteredAllergy.text = "üëå ÏÑ§Ï†ïÎêú ÌïÑÌÑ∞: ÏóÜÏùå"
                } else {
                    binding.tvFilteredAllergy.text = "üëå ÏÑ§Ï†ïÎêú ÌïÑÌÑ∞: ${selectedAllergies}"
                }
                val allMenus = franchiseViewModel.allMenus.value!!
                var searchKeyword = ""
                if (!_searchKeyword.isNullOrBlank()){
                    searchKeyword = _searchKeyword
                }
                if (selectedAllergies != null) {
                    if (selectedAllergies.size == 0) {
                        if (clickedCategory != "Ï†ÑÏ≤¥") {
                            val allCategoryMenus = allMenus.filter {
                                it.type == clickedCategory && it.name.contains(searchKeyword) }
                            menuAdapter.submitList(allCategoryMenus)
                            binding.tvMenuCount.text = "ÏÉÅÌíà ${allCategoryMenus.size}Í∞ú"
                        } else {
                            val allCategoryMenus = allMenus.filter {
                                it.name.contains(searchKeyword) }
                            menuAdapter.submitList(allCategoryMenus)
                            binding.tvMenuCount.text = "ÏÉÅÌíà ${allCategoryMenus.size}Í∞ú"
                        }
                    } else {
                        selectedAllergies.forEach {
                            val index = allergyNameList.indexOf(it)
                            val selectedAllergyKeywords = allergyKeywordsList[index]
                            val filteredMenus = mutableListOf<Menu>()
                            selectedAllergyKeywords.forEach { allergyKeyword ->
                                if (clickedCategory != "Ï†ÑÏ≤¥") {
                                    filteredMenus += allMenus.filter {
                                        it.type == clickedCategory && !it.allergy.contains(allergyKeyword)
                                                && it.name.contains(searchKeyword)
                                    }
                                } else {
                                    filteredMenus += allMenus.filter {
                                        !it.allergy.contains(allergyKeyword) && it.name.contains(searchKeyword)
                                    }
                                }
                            }
                            menuAdapter.submitList(filteredMenus)
                            binding.tvMenuCount.text = "ÏÉÅÌíà ${filteredMenus.size}Í∞ú"
                        }
                    }

                    brandAdapter.itemClick = object : BrandAdapter.ItemClick {
                        override fun onClick(view: View, position: Int) {
                            clickedBrand = brands[position]
                            if (selectedAllergies.size == 0) {
                                if (clickedCategory != "Ï†ÑÏ≤¥") {
                                    val allBrandMenus = allMenus.filter {
                                        it.type == clickedCategory && it.brand == clickedBrand && it.name.contains(searchKeyword)
                                    }
                                    menuAdapter.submitList(allBrandMenus)
                                    binding.tvMenuCount.text = "ÏÉÅÌíà ${allBrandMenus.size}Í∞ú"
                                } else {
                                    val allBrandMenus = allMenus.filter {
                                        it.brand == clickedBrand && it.name.contains(searchKeyword) }
                                    menuAdapter.submitList(allBrandMenus)
                                    binding.tvMenuCount.text = "ÏÉÅÌíà ${allBrandMenus.size}Í∞ú"
                                }
                            } else {
                                selectedAllergies.forEach {
                                    val index = allergyNameList.indexOf(it)
                                    val selectedAllergyKeywords = allergyKeywordsList[index]
                                    val filteredBrandMenus = mutableListOf<Menu>()
                                    selectedAllergyKeywords.forEach { allergyKeyword ->
                                        if (clickedCategory != "Ï†ÑÏ≤¥") {
                                            filteredBrandMenus += allMenus.filter {
                                                it.type == clickedCategory && !it.allergy.contains(allergyKeyword)
                                                    && it.brand == clickedBrand && it.name.contains(searchKeyword)
                                            }
                                        } else {
                                            filteredBrandMenus += allMenus.filter {
                                                !it.allergy.contains(allergyKeyword)
                                                    && it.brand == clickedBrand && it.name.contains(searchKeyword)
                                            }
                                        }
                                    }
                                    menuAdapter.submitList(filteredBrandMenus)
                                    binding.tvMenuCount.text = "ÏÉÅÌíà ${filteredBrandMenus.size}Í∞ú"
                                }
                            }
                        }
                    }
                }
            }
        }

        val franchiseFilterFragment = requireActivity().supportFragmentManager.findFragmentByTag("FranchiseFilterFragment")
        binding.btnFilter.setOnClickListener{
            requireActivity().supportFragmentManager.beginTransaction().apply {
//                hide(this@FranchiseCategoryFragment)
                if (franchiseFilterFragment == null) {
                    add(R.id.main_frame, FranchiseFilterFragment(), "FranchiseCategoryFragment")
                } else {
                    show(franchiseFilterFragment)
                }
                addToBackStack(null)
                commit()
            }
        }

        val franchiseDetailFragment = requireActivity().supportFragmentManager.findFragmentByTag("FranchiseDetailFragment")
        menuAdapter.itemClick = object : MenuAdapter.ItemClick {
            override fun onClick(view: View, position: Int) {
                clickedMenu = clickedBrandMenus[position]
                val dataToSend = clickedMenu.id
                val dataToSend2 = clickedMenu.type
                val menuDetail = FranchiseDetailFragment.newInstance(dataToSend, dataToSend2)
                requireActivity().supportFragmentManager.beginTransaction().apply {
                    hide(this@FranchiseCategoryFragment)
                    if (franchiseDetailFragment == null) {
                        add(R.id.main_frame, menuDetail, "FranchiseDetailFragment")
                    } else {
                        show(menuDetail)
                    }
                    addToBackStack(null)
                    commit()
                }
            }
        }



//        val itemListFragment = requireActivity().supportFragmentManager.findFragmentByTag("ItemListFragment")
//        binding.btnHomeSearch.setOnClickListener() {
//            viewModel.setSearchKeyword(binding.etHomeSearch.text.toString())
//            requireActivity().supportFragmentManager.beginTransaction().apply {
//                hide(this@HomeFragment)
//                if (itemListFragment == null) {
//                    add(R.id.main_frame, ItemListFragment(), "ItemListFragment")
//                } else {
//                    show(itemListFragment)
//                }
//                addToBackStack(null)
//                commit()
//            }
//        }
//
//        binding.etHomeSearch.setOnEditorActionListener { _, actionId, _ ->
//            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
//                viewModel.setSearchKeyword(binding.etHomeSearch.text.toString())
//                requireActivity().supportFragmentManager.beginTransaction().apply {
//                    hide(this@HomeFragment)
//                    if (itemListFragment == null) {
//                        add(R.id.main_frame, ItemListFragment(), "ItemListFragment")
//                    } else {
//                        show(itemListFragment)
//                    }
//                    addToBackStack(null)
//                    commit()
//                }
//                true // Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏùåÏùÑ ÎÇòÌÉÄÎÉÑ
//            } else {
//                false
//            }
//        }

//        val myPageFragment = requireActivity().supportFragmentManager.findFragmentByTag("MyPageFragment")
//        binding.btnTabMypage.setOnClickListener{
//            requireActivity().supportFragmentManager.beginTransaction().apply {
//                hide(this@HomeFragment)
//                if (myPageFragment == null) {
//                    add(R.id.main_frame, MyPageFragment(), "MyPageFragment")
//                } else if (myPageFragment != null && myPageFragment.isHidden){
//                    show(myPageFragment)
//                }
//                addToBackStack(null)
//                commit()
//            }
//        }
//
//        val communityHomeFragment = requireActivity().supportFragmentManager.findFragmentByTag("CommunityHomeFragment")
//        binding.btnTabCommunity.setOnClickListener{
//            requireActivity().supportFragmentManager.beginTransaction().apply {
//                hide(this@HomeFragment)
//                if (communityHomeFragment == null) {
//                    add(R.id.main_frame, CommunityHomeFragment(), "CommunityHomeFragment")
//                } else if (communityHomeFragment != null && communityHomeFragment.isHidden){
//                    show(communityHomeFragment)
//                }
//                addToBackStack(null)
//                commit()
//            }
//        }
    }
//    private fun brandClicker(view: View, position: Int){
//            isBrandCheckedList[position] = !isBrandCheckedList[position]
//            updateButtonState(button, position)
//            setCategories(button, position)
//    }
//
//    private fun updateButtonState(view: View, position: Int) {
//        if (isCategoryButtonCheckedList[position]) {
//            view.setBackgroundColor(
//                ContextCompat.getColor(
//                    requireContext(),
//                    R.color.main_color_orange
//                )
//            )
//            view.setTextColor(ContextCompat.getColor(requireContext(), R.color.white))
//        } else {
//            view.setBackgroundColor(
//                ContextCompat.getColor(
//                    requireContext(),
//                    R.color.main_color_more_light_gray
//                )
//            )
//            view.setTextColor(ContextCompat.getColor(requireContext(), R.color.black))
//        }
//    }
}